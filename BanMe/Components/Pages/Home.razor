@page "/"
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<PageTitle>BanMe</PageTitle>

<br />
<br />

<div class="container">

	<div class="row-cols-lg-1 gy-4">
		<div class="col d-flex justify-content-center">
			<h2> Recommended Bans For </h2>
		</div>
	</div>

	<div class="row-cols-lg-1 gy-4">
		<div class="col d-flex justify-content-center">
			
			<form class="row row-cols-lg-auto g-3 align-items-center">

				<div class="col-12">
					<MudAutocomplete T="string" Label="Champion" SearchFunc="@SearchChamps" ValueChanged="@(async (value)=> await OnChampChanged(value))"
									 ResetValueOnEmptyText="true"
									 CoerceText="true" CoerceValue="true" />
				</div>

				<div class="col-12">
					<MudSelect T="string" Label="Role" AnchorOrigin="Origin.CenterCenter" ValueChanged="@(async (value) => await OnRoleChanged(value))">
						<MudSelectItem Value="@Roles.ANY" />
						<MudSelectItem Value="@Roles.TOP" />
						<MudSelectItem Value="@Roles.MIDDLE" />
						<MudSelectItem Value="@Roles.JUNGLE" />
						<MudSelectItem Value="@Roles.BOTTOM" />
						<MudSelectItem Value="@Roles.SUPPORT" />
					</MudSelect>
				</div>
			</form>

		</div>
	</div>

		@foreach(var entry in _roleBans)
		{
			<div class="mt-2 row row-cols-lg-auto gx-1">
				<div class="col d-flex justify-content-left">
					<h3>@entry.Key.ToString().ToLower()</h3>
				</div>
			</div>

			<div class="billboard">
				<div class="mt-2 mb-md-5 row row-cols-lg-10 gx-2">

					@if (_useRoleBans)
					{
						foreach (var champStat in entry.Value)
						{
							<div class="col d-flex justify-content-left">
								@switch (entry.Key)
								{
									case Roles.TOP:
										{
											<ChampEntry ChampionName="@champStat.ChampionName" WinRate="champStat.TopWinRate" PickRate="champStat.TopPickRate" BanRate="champStat.BanRate" ImageSource=@GetChampSquare(champStat.ChampionName) />
											break;
										}
									case Roles.MIDDLE:
										{
											<ChampEntry ChampionName="@champStat.ChampionName" WinRate="champStat.MidWinRate" PickRate="champStat.MidPickRate" BanRate="champStat.BanRate" ImageSource=@GetChampSquare(champStat.ChampionName) />
											break;
										}
									case Roles.JUNGLE:
										{
											<ChampEntry ChampionName="@champStat.ChampionName" WinRate="champStat.JungleWinRate" PickRate="champStat.JunglePickRate" BanRate="champStat.BanRate" ImageSource=@GetChampSquare(champStat.ChampionName) />
											break;
										}
									case Roles.BOTTOM:
										{
											<ChampEntry ChampionName="@champStat.ChampionName" WinRate="champStat.BotWinRate" PickRate="champStat.BotPickRate" BanRate="champStat.BanRate" ImageSource=@GetChampSquare(champStat.ChampionName) />
											break;
										}
									case Roles.SUPPORT:
										{
											<ChampEntry ChampionName="@champStat.ChampionName" WinRate="champStat.SuppWinRate" PickRate="champStat.SuppPickRate" BanRate="champStat.BanRate" ImageSource=@GetChampSquare(champStat.ChampionName) />
											break;
										}
								}
							</div>
						}
					}
					else
					{
						foreach(ChampMatchupStats matchup in _champBans)
						{
							<div class="col d-flex justify-content-left">
								<ChampEntry ChampionName="@matchup.EnemyChampion" WinRate="matchup.WinRate" PickRate="matchup.Picks" BanRate="0" ImageSource=@GetChampSquare(matchup.EnemyChampion) />
							</div>
						}
					}
				</div>
			</div>
		}
</div>

@code {

	private Dictionary<string, List<ChampGameStats>> _roleBans = new() { { Roles.TOP, new() }, { Roles.MIDDLE, new() }, { Roles.JUNGLE, new () }, { Roles.BOTTOM, new() }, { Roles.SUPPORT, new() } };

	private List<ChampMatchupStats> _champBans = new();

	private string currentPatch = "14.4.1";

	private string _selectedChamp = "NONE";

	private string _selectedRole = Roles.ANY;

	private string[] _champNames = Enum.GetNames(typeof(Champion));

	private bool _useRoleBans = true;

	[Inject]
	private ISender Mediator { get; set; }

	protected override async Task OnInitializedAsync()
	{
		foreach (string role in Roles.ALL)
		{
			var query = new GetChampGameStatsByWinRate(role, 10);

			var response = await Mediator.Send(query);

			_roleBans[role].AddRange(response.ChampGameStats);
		}
	}

	protected string GetChampSquare(string champion)
	{
		if (champion == "NUNUWILLUMP")
		{
			champion = "NUNU";
		}
		return $"https://cdn.communitydragon.org/{currentPatch}/champion/{champion}/square";
	}

	private async Task<IEnumerable<string>> SearchChamps(string value)
	{
		await Task.Delay(5);

		if (string.IsNullOrEmpty(value))
		{
			return _champNames;
		}

		return _champNames.Where(n => n.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}

	private async Task OnChampChanged(string value)
	{
		if (value != string.Empty)
		{
			_selectedChamp = value;
			_useRoleBans = false;

			_champBans.Clear();

			GetChampMatchupStatsByWinRate query;
			ChampMatchupStatsResponse response;

			query = new GetChampMatchupStatsByWinRate(value, 10);
			response = await Mediator.Send(query);

			_champBans = response.ChampMatchupStats;
		}
	}

	private async Task OnRoleChanged(string value)
	{
		_selectedRole = value;
		_useRoleBans = true;

		_roleBans.Clear();

		GetChampGameStatsByWinRate query;
		ChampGameStatsResponse response;

		if (value == Roles.ANY)
		{
			foreach (string r in Roles.ALL)
			{
				query = new GetChampGameStatsByWinRate(r, 10);

				response = await Mediator.Send(query);

				_roleBans.Add(r, response.ChampGameStats);
			}

			return;
		}

		query = new GetChampGameStatsByWinRate(value, 10);

		response = await Mediator.Send(query);

		_roleBans.Add(value, response.ChampGameStats);
	}
}

