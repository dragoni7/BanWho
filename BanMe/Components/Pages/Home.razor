@page "/"
@attribute [StreamRendering(true)]

<PageTitle>BanMe</PageTitle>

<center><h2>Recommended Bans</h2></center>

<br />
<br />

<div class="container">
	<div class="row row-cols-lg-5 gx-4">
		<div class="col">
			<center>
				<h3>Top</h3>
				@foreach (var entry in _recommendedBans[Roles.TOP])
				{
					<ChampEntry ChampionName="@entry.ChampionName" WinRate="entry.TopWinRate" PickRate="entry.TopPickRate" BanRate="entry.BanRate" ImageSource=@GetChampSquare(entry.ChampionName) />
				}
			</center>
		</div>
		<div class="col">
			<center>
				<h3>Mid</h3>
				@foreach (var entry in _recommendedBans[Roles.MIDDLE])
				{
					<ChampEntry ChampionName="@entry.ChampionName" WinRate="entry.MidWinRate" PickRate="entry.MidPickRate" BanRate="entry.BanRate" ImageSource=@GetChampSquare(entry.ChampionName) />
				}
			</center>
		</div>
		<div class="col">
			<center>
				<h3>Jungle</h3>
				@foreach (var entry in _recommendedBans[Roles.JUNGLE])
				{
					<ChampEntry ChampionName="@entry.ChampionName" WinRate="entry.JungleWinRate" PickRate="entry.JunglePickRate" BanRate="entry.BanRate" ImageSource=@GetChampSquare(entry.ChampionName) />
				}
			</center>
		</div>
		<div class="col">
			<center>
				<h3>Bot</h3>
				@foreach (var entry in _recommendedBans[Roles.BOTTOM])
				{
					<ChampEntry ChampionName="@entry.ChampionName" WinRate="entry.BotWinRate" PickRate="entry.BotPickRate" BanRate="entry.BanRate" ImageSource=@GetChampSquare(entry.ChampionName) />
				}
			</center>
		</div>
		<div class="col">
			<center>
				<h3>Supp</h3>
				@foreach (var entry in _recommendedBans[Roles.SUPPORT])
				{
					<ChampEntry ChampionName="@entry.ChampionName" WinRate="entry.SuppWinRate" PickRate="entry.SuppPickRate" BanRate="entry.BanRate" ImageSource=@GetChampSquare(entry.ChampionName) />
				}
			</center>
		</div>
	</div>
</div>

@code {

	private Dictionary<string, List<ChampGameStats>> _recommendedBans = new() { { Roles.TOP, new() }, { Roles.MIDDLE, new() }, { Roles.JUNGLE, new () }, { Roles.BOTTOM, new() }, { Roles.SUPPORT, new() } };

	private string currentPatch = "14.4.1";

	[Inject]
	private ISender Mediator { get; set; }

	protected override async Task OnInitializedAsync()
	{
		foreach (string role in Roles.ALL)
		{
			var query = new GetChampGameStatsByWinRate(role, 10);

			var response = await Mediator.Send(query);

			_recommendedBans[role].AddRange(response.ChampGameStats);
		}
	}

	protected string GetChampSquare(string champion)
	{
		if (champion == "NUNUWILLUMP")
		{
			champion = "NUNU";
		}
		return $"https://cdn.communitydragon.org/{currentPatch}/champion/{champion}/square";
	}
}

