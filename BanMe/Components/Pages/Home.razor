@page "/"
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<PageTitle>BanMe</PageTitle>

<br />
<br />

<div class="container">
	<div class="row-cols-lg-1 gy-4">
		<div class="col d-flex justify-content-center">
			<h2> Recommended Bans For </h2>
		</div>
	</div>
	<div class="row-cols-lg-1 gy-4">
		<div class="col d-flex justify-content-center">
			
			<form class="row row-cols-lg-auto g-3 align-items-center">

				<div class="col-12">
					<label class="visually-hidden" for="inlineFormSelectChamp">Champ Select</label>
					<select @onchange="ChampChanged" class="form-select border-0 shadow-none bg-dark text-white" id="inlineFormSelectChamp">
						<option selected>All</option>
					</select>
				</div>

				<div class="col-12">
					<label class="visually-hidden" for="inlineFormSelectRole">Role Select</label>
					<select @onchange="@(async (e) => await OnRoleChanged(e))" class="form-select border-0 shadow-none bg-dark text-white" id="inlineFormSelectRole">
						<option selected>Roles</option>
						<option value="@Roles.TOP">Top</option>
						<option value="@Roles.MIDDLE">Middle</option>
						<option value="@Roles.JUNGLE">Jungle</option>
						<option value="@Roles.BOTTOM">Bottom</option>
						<option value="@Roles.SUPPORT">Support</option>
					</select>
				</div>
			</form>

		</div>
	</div>
	<div class="row row-cols-lg-@_recommendedBans.Count gx-4">

		@foreach(var entry in _recommendedBans)
		{
			<div class="col d-flex justify-content-center">
				<center>
					<h3>@entry.Key.ToString().ToLower()</h3>

			@foreach (var champStat in entry.Value)
			{
				switch (entry.Key)
				{
					case Roles.TOP:
						{
							<ChampEntry ChampionName="@champStat.ChampionName" WinRate="champStat.TopWinRate" PickRate="champStat.TopPickRate" BanRate="champStat.BanRate" ImageSource=@GetChampSquare(champStat.ChampionName) />
							break;
						}
					case Roles.MIDDLE:
						{
							<ChampEntry ChampionName="@champStat.ChampionName" WinRate="champStat.MidWinRate" PickRate="champStat.MidPickRate" BanRate="champStat.BanRate" ImageSource=@GetChampSquare(champStat.ChampionName) />
							break;
						}
					case Roles.JUNGLE:
						{
							<ChampEntry ChampionName="@champStat.ChampionName" WinRate="champStat.JungleWinRate" PickRate="champStat.JunglePickRate" BanRate="champStat.BanRate" ImageSource=@GetChampSquare(champStat.ChampionName) />
							break;
						}
					case Roles.BOTTOM:
						{
							<ChampEntry ChampionName="@champStat.ChampionName" WinRate="champStat.BotWinRate" PickRate="champStat.BotPickRate" BanRate="champStat.BanRate" ImageSource=@GetChampSquare(champStat.ChampionName) />
							break;
						}
					case Roles.SUPPORT:
						{
							<ChampEntry ChampionName="@champStat.ChampionName" WinRate="champStat.SuppWinRate" PickRate="champStat.SuppPickRate" BanRate="champStat.BanRate" ImageSource=@GetChampSquare(champStat.ChampionName) />
							break;
						}
				}
			}
				</center>
			</div>
		}
	</div>
</div>

@code {

	private Dictionary<string, List<ChampGameStats>> _recommendedBans = new() { { Roles.TOP, new() }, { Roles.MIDDLE, new() }, { Roles.JUNGLE, new () }, { Roles.BOTTOM, new() }, { Roles.SUPPORT, new() } };

	private string currentPatch = "14.4.1";

	[Inject]
	private ISender Mediator { get; set; }

	protected override async Task OnInitializedAsync()
	{
		foreach (string role in Roles.ALL)
		{
			var query = new GetChampGameStatsByWinRate(role, 10);

			var response = await Mediator.Send(query);

			_recommendedBans[role].AddRange(response.ChampGameStats);
		}
	}

	protected string GetChampSquare(string champion)
	{
		if (champion == "NUNUWILLUMP")
		{
			champion = "NUNU";
		}
		return $"https://cdn.communitydragon.org/{currentPatch}/champion/{champion}/square";
	}

	private async Task OnRoleChanged(ChangeEventArgs e)
	{
		string role = e.Value.ToString();

		_recommendedBans.Clear();

		GetChampGameStatsByWinRate query;
		ChampGameStatsResponse response;

		if (role == "Roles")
		{
			foreach (string r in Roles.ALL)
			{
				query = new GetChampGameStatsByWinRate(r, 10);

				response = await Mediator.Send(query);

				_recommendedBans.Add(r, response.ChampGameStats);
			}

			return;
		}

		query = new GetChampGameStatsByWinRate(role, 10);

		response = await Mediator.Send(query);

		_recommendedBans.Add(role, response.ChampGameStats);
	}

	private async void ChampChanged(ChangeEventArgs e)
	{

	}
}

