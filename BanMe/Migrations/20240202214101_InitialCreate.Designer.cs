// <auto-generated />
using BanMe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BanMe.Migrations
{
    [DbContext(typeof(BanMeContext))]
    [Migration("20240202214101_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BanMe.Entities.BanMeInfo", b =>
                {
                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatchUsed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordedGames")
                        .HasColumnType("int");

                    b.HasKey("AppVersion");

                    b.ToTable("AppInfo");
                });

            modelBuilder.Entity("BanMe.Entities.ChampGameStats", b =>
                {
                    b.Property<string>("ChampionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Bans")
                        .HasColumnType("int");

                    b.Property<int>("BotPicks")
                        .HasColumnType("int");

                    b.Property<int>("BotWins")
                        .HasColumnType("int");

                    b.Property<int>("JunglePicks")
                        .HasColumnType("int");

                    b.Property<int>("JungleWins")
                        .HasColumnType("int");

                    b.Property<int>("MidPicks")
                        .HasColumnType("int");

                    b.Property<int>("MidWins")
                        .HasColumnType("int");

                    b.Property<int>("SuppPicks")
                        .HasColumnType("int");

                    b.Property<int>("SuppWins")
                        .HasColumnType("int");

                    b.Property<int>("TopPicks")
                        .HasColumnType("int");

                    b.Property<int>("TopWins")
                        .HasColumnType("int");

                    b.HasKey("ChampionName");

                    b.ToTable("ChampGameStats");
                });

            modelBuilder.Entity("BanMe.Entities.ChampMatchupStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChampGameStatsChampionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnemyChampion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Picks")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampGameStatsChampionName");

                    b.ToTable("ChampMatchupStats");
                });

            modelBuilder.Entity("BanMe.Entities.Player", b =>
                {
                    b.Property<string>("PUUID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PUUID");

                    b.ToTable("PlayerPuuids");
                });

            modelBuilder.Entity("BanMe.Entities.ChampMatchupStats", b =>
                {
                    b.HasOne("BanMe.Entities.ChampGameStats", null)
                        .WithMany("MatchupStats")
                        .HasForeignKey("ChampGameStatsChampionName");
                });

            modelBuilder.Entity("BanMe.Entities.ChampGameStats", b =>
                {
                    b.Navigation("MatchupStats");
                });
#pragma warning restore 612, 618
        }
    }
}
