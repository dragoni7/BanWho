@page "/"
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<PageTitle>BanMe</PageTitle>

<MudGrid Justify="Justify.Center" Spacing="1">

	<MudItem xs="12" Class="d-flex flex-column align-center justify-center mud-width-full">
		<MudTabs Elevation="1" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @bind-ActivePanelIndex="UseRoleBans">

			<MudTabPanel>
				<ChildContent>
					<MudSelect Dense="true" T="string" Label="Role" AnchorOrigin="Origin.CenterCenter" ValueChanged="@(async (value) => await OnRoleChanged(value))">
						<MudSelectItem Value="@Roles.TOP">
							<img src="Assets\positionicon-top.png" height="28" width="28" class="mr-1" /> TOP
						</MudSelectItem>
						<MudSelectItem Value="@Roles.MIDDLE">
							<img src="Assets\positionicon-mid.png" height="28" width="28" class="mr-1" /> MIDDLE
						</MudSelectItem>
						<MudSelectItem Value="@Roles.JUNGLE">
							<img src="Assets\positionicon-jungle.png" height="28" width="28" class="mr-1" /> JUNGLE
						</MudSelectItem>
						<MudSelectItem Value="@Roles.BOTTOM">
							<img src="Assets\positionicon-bottom.png" height="28" width="28" class="mr-1" /> BOTTOM
						</MudSelectItem>
						<MudSelectItem Value="@Roles.SUPPORT">
							<img src="Assets\positionicon-support.png" height="28" width="28" class="mr-1" /> SUPPORT
						</MudSelectItem>
					</MudSelect>
				</ChildContent>
				<TabWrapperContent>
					<MudTooltip Text="View Recommended Bans by Roles">
						@context
					</MudTooltip>
				</TabWrapperContent>
				<TabContent>
					<MudText>Role Bans</MudText>
				</TabContent>
			</MudTabPanel>

			<MudTabPanel>
				<ChildContent>
					<MudAutocomplete Dense="true" T="string" Label="Champion" SearchFunc="@SearchChamps" ValueChanged="@(async (value)=> await OnChampChanged(value))"
									 ResetValueOnEmptyText="true"
									 CoerceText="true" CoerceValue="true" />
				</ChildContent>
				<TabWrapperContent>
					<MudTooltip Text="View Recommended Bans by Matchups">
						@context
					</MudTooltip>
				</TabWrapperContent>
				<TabContent>
					<MudText>Matchup Bans</MudText>
				</TabContent>
			</MudTabPanel>

		</MudTabs>

	</MudItem>

	<MudAlert Severity="Severity.Info" Dense="true" Elevation="3" Class="my-1">Current Patch: @_currentPatch</MudAlert>
	<MudAlert Severity="Severity.Info" Dense="true" Elevation="3" Class="my-1">App Version: @_appVersion</MudAlert>
	<MudAlert Severity="Severity.Normal" Dense="true" Icon="@Icons.Material.Filled.Analytics" Style="color: rgb(171, 71, 188)" Elevation="3" Class="my-1">Games Recorded: @_recordedGames</MudAlert>

	<MudItem xs="12" Class="d-flex flex-column align-center justify-center mud-width-full py-0">
			<MudStack Spacing="1">
				<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Info" IconColor="Color.Warning" Color="Color.Warning" OnClick="OnExpandCollapseClick">@(_dataSourceExpanded ? "Collapse Info" : "Data Source Info")</MudButton>
				<MudCollapse Expanded="_dataSourceExpanded">
					<MudGrid Justify="Justify.Center">
						<MudAlert Severity="Severity.Normal" Elevation="3" NoIcon="true" Class="my-1">Region: Global</MudAlert>
						<MudAlert Severity="Severity.Normal" Elevation="3" NoIcon="true" Class="my-1">Game Ranks: Emerald IV+</MudAlert>
					</MudGrid>
				</MudCollapse>
			</MudStack>
	</MudItem>

</MudGrid>

<MudDivider />

<MudContainer MaxWidth="MaxWidth.Medium" Class="py-10">

	@if (UseRoleBans == 0 && _roleBans.Count() > 0)
	{
		<MudItem xs="12" Class="d-flex flex-column align-center justify-center mud-width-full py-2">
			<MudText Typo="Typo.h5">Recommended Bans</MudText>
		</MudItem>

		<MudDataGrid Items="@_roleBans" Outlined="true" Filterable="false" SortMode="@SortMode.None" Groupable="false" Elevation="10" Dense="true" Style="background-color:rgb(35, 44, 77)">
			<Columns>
				<TemplateColumn Title="Champion">
					<CellTemplate>
						<MudStack Row>
							<MudImage ObjectFit="ObjectFit.ScaleDown" Src="@GetChampSquare(context.Item.ChampionName)" Width="40" Height="40" Alt="@context.Item.ChampionName" />
							<MudText>@context.Item.ChampionName</MudText>
							</MudStack>
						</CellTemplate>
					</TemplateColumn>
					@switch (_selectedRole)
					{
						case Roles.TOP:
							{
								<PropertyColumn Property="x => x.TopWinRate" Format="F2" Title="Win Rate %" />
								<PropertyColumn Property="x => x.TopPickRate" Format="F2" Title="Pick Rate %" />
								break;
							}
						case Roles.MIDDLE:
							{
								<PropertyColumn Property="x => x.MidWinRate" Format="F2" Title="Win Rate %" />
								<PropertyColumn Property="x => x.MidPickRate" Format="F2" Title="Pick Rate %" />
								break;
							}
						case Roles.JUNGLE:
							{
								<PropertyColumn Property="x => x.JungleWinRate" Format="F2" Title="Win Rate %" />
								<PropertyColumn Property="x => x.JunglePickRate" Format="F2" Title="Pick Rate %" />
								break;
							}
						case Roles.BOTTOM:
							{
								<PropertyColumn Property="x => x.BotWinRate" Format="F2" Title="Win Rate %" />
								<PropertyColumn Property="x => x.BotPickRate" Format="F2" Title="Pick Rate %" />
								break;
							}
						case Roles.SUPPORT:
							{
								<PropertyColumn Property="x => x.SuppWinRate" Format="F2" Title="Win Rate %" />
								<PropertyColumn Property="x => x.SuppPickRate" Format="F2" Title="Pick Rate %" />
								break;
							}
					}
				<PropertyColumn Property="x => x.BanRate" Format="F2" Title="Ban Rate" />
			</Columns>
		</MudDataGrid>
	}
	else if (_matchupBans.Count() > 0)
	{
		<MudItem xs="12" Class="d-flex flex-column align-center justify-center mud-width-full py-2">
			<MudGrid Justify="Justify.Center" Spacing="1">
				<MudItem>
					<MudText Typo="Typo.h5">Recommended Bans</MudText>
				</MudItem>
				<MudItem>
					<MudTooltip Text="Disclaimer: data does not account for roles in matchups." Color="Color.Tertiary" Style="font-size: 14px;">
						<MudIcon Icon="@Icons.Material.Outlined.Info" Color="Color.Tertiary" />
					</MudTooltip>
				</MudItem>
			</MudGrid>
		</MudItem>

		<MudDataGrid Items="@_matchupBans" Outlined="true" Filterable="false" SortMode="@SortMode.None" Groupable="false" Elevation="10" Dense="true" Style="background-color:rgb(35, 44, 77)">
			<Columns>
				<TemplateColumn Title="Champion">
					<CellTemplate>
						<MudStack Row>
							<MudImage ObjectFit="ObjectFit.ScaleDown" Src="@GetChampSquare(context.Item.EnemyChampion)" Width="40" Height="40" Alt="@context.Item.EnemyChampion" />
							<MudText>@context.Item.EnemyChampion</MudText>
							</MudStack>
						</CellTemplate>
					</TemplateColumn>
					<PropertyColumn Property="x => x.WinRate" Format="F2" Title="Win Rate %" />
					<PropertyColumn Property="x => x.Picks" Title="Games Played" />
				</Columns>
			</MudDataGrid>
	}
	else
	{
		<div class="aurelionsol" />
		<br />
	}

</MudContainer>

@code {
	private IEnumerable<ChampGameStats> _roleBans = new List<ChampGameStats>();

	private List<ChampMatchupStats> _matchupBans = new();

	private string _selectedRole = string.Empty;

	private string _currentPatch = string.Empty;

	private string _appVersion = string.Empty;

	private int _recordedGames = 0;

	private string[] _champNames = Enum.GetNames(typeof(Champion));

	private int _useRolebans = 0;

	private bool _dataSourceExpanded = false;

	private int UseRoleBans 
	{ 
		get
		{
			return _useRolebans;
		}

		set
		{
			if (_useRolebans != value)
			{
				_matchupBans = new();
				_roleBans = new List<ChampGameStats>();
				_selectedRole = "";
			}

			_useRolebans = value;
		} 
	}

	[Inject]
	private ISender Mediator { get; set; }

	protected override async Task OnInitializedAsync()
	{
		GetPatchUsed patchQuery = new();
		PatchUsedResponse patchResponse = await Mediator.Send(patchQuery);

		_currentPatch = patchResponse.patchUsed;

		GetAppVersion appVersionQuery = new();
		AppVersionResponse appVersionResponse = await Mediator.Send(appVersionQuery);

		_appVersion = appVersionResponse.appVersion;

		GetRecordedGames recordedGamesQuery = new();
		RecordedGamesResponse recordedGamesResponse = await Mediator.Send(recordedGamesQuery);

		_recordedGames = recordedGamesResponse.recordedGames;
	}

	protected string GetChampSquare(string champion)
	{
		switch(champion)
		{
			case "NUNUWILLUMP":
				{
					champion = "NUNU";
					break;
				}
			case "WUKONG":
				{
					champion = "MONKEYKING";
					break;
				}
			case "RENATAGLASC":
				{
					champion = "RENATA";
					break;
				}
		}

		return $"https://cdn.communitydragon.org/{_currentPatch}/champion/{champion}/square";
	}

	private async Task<IEnumerable<string>> SearchChamps(string value)
	{
		await Task.Delay(1);

		if (string.IsNullOrEmpty(value))
		{
			return _champNames;
		}

		return _champNames.Where(n => n.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}

	private void OnExpandCollapseClick()
	{
		_dataSourceExpanded = !_dataSourceExpanded;
	}

	private async Task OnChampChanged(string value)
	{
		if (value != string.Empty)
		{
			_matchupBans.Clear();

			GetChampMatchupStatsByWinRate query = new GetChampMatchupStatsByWinRate(value, DataThresholds.DataAmountToDisplay);
			ChampMatchupStatsResponse response = await Mediator.Send(query);

			_matchupBans = response.ChampMatchupStats;
		}
	}

	private async Task OnRoleChanged(string value)
	{
		_selectedRole = value;

		_roleBans = new List<ChampGameStats>();

		GetChampGameStatsByWinRate query = new GetChampGameStatsByWinRate(value, DataThresholds.DataAmountToDisplay);
		ChampGameStatsResponse response = await Mediator.Send(query);

		_roleBans = response.ChampGameStats;
	}
}

